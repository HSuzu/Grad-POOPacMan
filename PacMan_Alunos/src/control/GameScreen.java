package control;

import control.Stage.State;
import elements.Element;
import java.awt.Color;
import utils.Consts;
import utils.Drawing;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Projeto de POO 2017
 * 
 * @author Luiz Eduardo
 * Baseado em material do Prof. Jose Fernando Junior
 */
public class GameScreen extends javax.swing.JFrame implements KeyListener {
    private ArrayList<Element> elemArray;
    private GameController controller = new GameController();
    private Stage stage;

    public GameScreen() {
        Drawing.setGameScreen(this);
        initComponents();
        
        /*Cria a janela do tamanho do tabuleiro + insets (bordas) da janela*/
        this.setSize(Consts.NUM_CELLS_X * Consts.CELL_SIZE + getInsets().left + getInsets().right,
                     (Consts.HEADER_SIZE + Consts.NUM_CELLS_Y) * Consts.CELL_SIZE + getInsets().top + getInsets().bottom);


        stage = new Stage();
        this.addKeyListener(stage);
        this.addKeyListener(this);
        
        controller.addStage(stage);
        
        elemArray = stage.getAllElements();
    }
    
    public final void addElement(Element elem) {
        elemArray.add(elem);
    }
    
    public void removeElement(Element elem) {
        elemArray.remove(elem);
        stage.removeElement(elem);
    }
    
    @Override
    public void paint(Graphics gOld) {
        elemArray = stage.getAllElements();
        Graphics g = getBufferStrategy().getDrawGraphics();

        /*Criamos um contexto grafico*/
        Graphics g2 = g.create(getInsets().right, getInsets().top, getWidth() - getInsets().left, getHeight() - getInsets().bottom);

        stage.iterationListener();
        elemArray = stage.getAllElements();
        if(stage.getState() == State.GAME_OVER) {
            stage.drawGameOver(g2);
        } else if(stage.getState() == State.TRANSITION) {
            stage.drawString(g2, stage.getTransitionTxt(), Color.WHITE);
        } else {
            stage.drawMap(g2);

            if(stage.getState() == State.GAME_ON) {
                this.controller.processAllElements(elemArray);
            }
            this.controller.drawAllElements(elemArray, g2);

            stage.drawHeader(g2);
        }

        g.dispose();
        g2.dispose();
        if (!getBufferStrategy().contentsLost()) {
            getBufferStrategy().show();
        }

        this.setTitle("PacMan" + elemArray.get(0).getStringPosition());
        
    }
    
    public void go() {
        TimerTask task = new TimerTask() {
            
            @Override
            public void run() {
                repaint();
            }
        };
        Timer timer = new Timer();
        timer.schedule(task, 0, Consts.DELAY);
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SCC0604 - Pacman");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(20, 20));
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void keyTyped(KeyEvent ke) {
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        switch(ke.getKeyCode()) {
            case KeyEvent.VK_S:
                if(ke.isControlDown()) {
                    stage.saveStage("savefile.sav");
                }
            break;
            case KeyEvent.VK_L:
                if(ke.isControlDown()) {
                    try {
                        stage.loadStage("savefile.sav");
                    } catch(FileNotFoundException ex) {
                        System.out.println(ex.getMessage());
                    }
                }
            break;
            default:
            break;
        }
    }

    @Override
    public void keyReleased(KeyEvent ke) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
